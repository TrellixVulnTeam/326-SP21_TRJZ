"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var RedisStore_1 = __importDefault(require("./RedisStore"));
describe('redisStore', function () {
    var name = 'testStore';
    var redisOptions = {
        host: process.env.REDIS_HOST || '127.0.0.1',
        auth_pass: process.env.REDIS_AUTH
    };
    var poolOptions = { min: 2, max: 4 };
    var options = { name: name, redisOptions: redisOptions, poolOptions: poolOptions };
    var store;
    beforeEach(function () {
        store = new RedisStore_1.default(options);
    });
    // describe("constructor", () => {
    //
    //   it("invalid host fail acquire connection", () => {
    //
    //     (new RedisStore({
    //       redisOptions: {
    //         host: "UNAVAILABLE_HOST"
    //       }
    //     })).should.throw();
    //   });
    //
    //   it("conn timeout fail acquire connection", () => {
    //
    //     (new RedisStore({
    //       redisOptions: redisOptions,
    //       poolOptions: {
    //         acquireTimeoutMillis: 1
    //       }
    //     })).should.throw();
    //   });
    // });
    describe('getName', function () {
        test('set given name', function () {
            expect(store.getName()).toBe(name);
        });
        test('set random name if not set', function () {
            var noNameStore = new RedisStore_1.default({ redisOptions: redisOptions });
            expect(noNameStore.getName()).not.toHaveLength(0);
        });
    });
    describe('getRedisOptions', function () {
        test('set given redis options', function () {
            expect(store.getRedisOptions()).toBe(redisOptions);
        });
    });
    describe('getPoolOptions', function () {
        test('set given pool options', function () {
            expect(store.getPoolOptions()).toBe(poolOptions);
        });
    });
    describe('getDefaultTtlInS', function () {
        test('returns undefined when not set', function () {
            expect(store.getDefaultTtlInS()).toBeUndefined();
        });
        test('get defaultTtlInS', function () {
            expect(store.setDefaultTtlInS(2)).toBe(2);
            expect(store.getDefaultTtlInS()).toBe(2);
        });
    });
    describe('setDefaultTtlInS', function () {
        test('set defaultTtlInS option', function () {
            expect(store.setDefaultTtlInS(2)).toBe(2);
            expect(store.getDefaultTtlInS()).toBe(2);
        });
    });
    describe('unsetDefaultTtlInS', function () {
        test('unset defaultTtlInS option', function () {
            expect(store.unsetDefaultTtlInS()).toBe(true);
            expect(store.getDefaultTtlInS()).toBeUndefined();
        });
    });
    describe('status', function () {
        test('get store stats', function () {
            var status = store.status();
            expect(status.name).toBe(name);
            expect(status.size).toBe(poolOptions.min);
            expect(status.available).toBe(0);
            expect(status.pending).toBe(0);
        });
    });
    describe('ping', function () {
        test("return 'PONG' if no arg is supplied", function () {
            return expect(store.ping()).resolves.toBe('PONG');
        });
        test("return 'string supplied'", function () {
            return expect(store.ping('Yello')).resolves.toBe('Yello');
        });
    });
    describe('get', function () {
        test('retrieve an existing key', function () { return __awaiter(void 0, void 0, void 0, function () {
            var key, value;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        key = 'chuck-norris';
                        value = 'superman';
                        return [4 /*yield*/, store.set(key, value)];
                    case 1:
                        _a.sent();
                        return [4 /*yield*/, expect(store.get(key)).resolves.toBe(value)];
                    case 2:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        }); });
        test('retrieve parsed json', function () { return __awaiter(void 0, void 0, void 0, function () {
            var key, value;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        key = 'chuck-norris';
                        value = { type: 'superman' };
                        return [4 /*yield*/, store.set(key, value)];
                    case 1:
                        _a.sent();
                        return [4 /*yield*/, expect(store.get(key)).resolves.toStrictEqual(value)];
                    case 2:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        }); });
        test('retrieve parsed array', function () { return __awaiter(void 0, void 0, void 0, function () {
            var key, value;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        key = 'chuck-norris';
                        value = ['superman', 'spideman'];
                        return [4 /*yield*/, store.set(key, value)];
                    case 1:
                        _a.sent();
                        return [4 /*yield*/, expect(store.keys()).resolves.toEqual(expect.arrayContaining([key]))];
                    case 2:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        }); });
        test("return null if key doesn't exist", function () {
            return expect(store.get('unknownKey')).resolves.toBeNull();
        });
    });
    describe('set', function () {
        test('store a value', function () { return __awaiter(void 0, void 0, void 0, function () {
            var key, value, result;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        key = 'key';
                        value = 'neverExpire';
                        return [4 /*yield*/, store.set(key, value)];
                    case 1:
                        result = _a.sent();
                        expect(result).toBe('OK');
                        return [4 /*yield*/, expect(store.get(key)).resolves.toBe(value)];
                    case 2:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        }); });
        test('store json', function () { return __awaiter(void 0, void 0, void 0, function () {
            var key, value, result;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        key = 'key';
                        value = { type: 'json' };
                        return [4 /*yield*/, store.set(key, value)];
                    case 1:
                        result = _a.sent();
                        expect(result).toBe('OK');
                        return [4 /*yield*/, expect(store.get(key)).resolves.toStrictEqual(value)];
                    case 2:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        }); });
        test('store array', function () { return __awaiter(void 0, void 0, void 0, function () {
            var key, value, result;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        key = 'key';
                        value = ['json', 'node'];
                        return [4 /*yield*/, store.set(key, value)];
                    case 1:
                        result = _a.sent();
                        expect(result).toBe('OK');
                        return [4 /*yield*/, expect(store.get(key)).resolves.toEqual(expect.arrayContaining(value))];
                    case 2:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        }); });
        test('store with an expiry if ttl set', function () { return __awaiter(void 0, void 0, void 0, function () {
            var key, value, ttlInSeconds, result;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        key = 'shortLivedKey';
                        value = 'expireIn1s';
                        ttlInSeconds = 1;
                        return [4 /*yield*/, store.set(key, value, ttlInSeconds)];
                    case 1:
                        result = _a.sent();
                        expect(result).toBe('OK');
                        return [4 /*yield*/, expect(store.get(key)).resolves.toBe(value)];
                    case 2:
                        _a.sent();
                        return [4 /*yield*/, new Promise(function (r) { return setTimeout(r, 1100); })];
                    case 3:
                        _a.sent();
                        return [4 /*yield*/, expect(store.get(key)).resolves.toBeNull()];
                    case 4:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        }); });
    });
    describe('del', function () {
        test('delete an existing key', function () { return __awaiter(void 0, void 0, void 0, function () {
            var key, value, result;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        key = 'key';
                        value = 'neverExpire';
                        return [4 /*yield*/, store.set(key, value)];
                    case 1:
                        _a.sent();
                        return [4 /*yield*/, store.del([key])];
                    case 2:
                        result = _a.sent();
                        expect(result).toBe(1);
                        return [4 /*yield*/, expect(store.del([key])).resolves.toBe(0)];
                    case 3:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        }); });
        test('return null deleting non-existing key', function () {
            return expect(store.del(['unknownKey'])).resolves.toBe(0);
        });
    });
    describe('expire', function () {
        test('set a key with expire in seconds', function () { return __awaiter(void 0, void 0, void 0, function () {
            var key, value, ttlInSeconds, result;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        key = 'key';
                        value = 'make it expire';
                        ttlInSeconds = 1;
                        return [4 /*yield*/, store.set(key, value)];
                    case 1:
                        _a.sent();
                        return [4 /*yield*/, store.expire(key, ttlInSeconds)];
                    case 2:
                        result = _a.sent();
                        expect(result).toBe(1);
                        return [4 /*yield*/, new Promise(function (r) { return setTimeout(r, 1100); })];
                    case 3:
                        _a.sent();
                        return [4 /*yield*/, expect(store.get(key)).resolves.toBeNull()];
                    case 4:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        }); });
        test('return null expiring non-existing key', function () {
            return expect(store.expire('unknownKey', 10)).resolves.toBe(0);
        });
    });
    describe('ttl', function () {
        test('return ttl left for a key in seconds', function () { return __awaiter(void 0, void 0, void 0, function () {
            var key, value, ttlInSeconds, result;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        key = 'key';
                        value = 'make it expire';
                        ttlInSeconds = 10;
                        return [4 /*yield*/, store.set(key, value, ttlInSeconds)];
                    case 1:
                        _a.sent();
                        return [4 /*yield*/, store.getTtl(key)];
                    case 2:
                        result = _a.sent();
                        expect(result).toBe(ttlInSeconds);
                        return [2 /*return*/];
                }
            });
        }); });
        test('return null on ttl for a non-existing key', function () {
            return expect(store.getTtl('unknownKey')).resolves.toBe(-2);
        });
    });
    describe('keys', function () {
        var keyValues = { key1: 'value1', key2: 'value2' };
        beforeEach(function () { return __awaiter(void 0, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, Promise.all(
                        // @ts-ignore
                        Object.keys(keyValues).map(function (key) { return store.set(key, keyValues[key]); }))];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        }); });
        test('return all the keys', function () { return __awaiter(void 0, void 0, void 0, function () {
            var keys;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, store.keys()];
                    case 1:
                        keys = _a.sent();
                        expect(keys).toEqual(expect.arrayContaining(Object.keys(keyValues)));
                        return [2 /*return*/];
                }
            });
        }); });
        test('return all the keys matches pattern', function () {
            return expect(store.keys('key[2]')).resolves.toStrictEqual(['key2']);
        });
    });
    describe('deleteAll', function () {
        var keyValues = { key1: 'value1', key2: 'value2' };
        beforeEach(function () { return __awaiter(void 0, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, store.deleteAll()];
                    case 1:
                        _a.sent();
                        return [4 /*yield*/, Promise.all(
                            // @ts-ignore
                            Object.keys(keyValues).map(function (key) { return store.set(key, keyValues[key]); }))];
                    case 2:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        }); });
        test('delete all the keys', function () { return __awaiter(void 0, void 0, void 0, function () {
            var result;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, store.deleteAll()];
                    case 1:
                        result = _a.sent();
                        expect(result).toBe(2);
                        return [4 /*yield*/, expect(store.keys()).resolves.toHaveLength(0)];
                    case 2:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        }); });
        test('delete all the keys matches pattern', function () { return __awaiter(void 0, void 0, void 0, function () {
            var result;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, store.deleteAll('key[2]')];
                    case 1:
                        result = _a.sent();
                        expect(result).toBe(1);
                        return [4 /*yield*/, expect(store.keys()).resolves.toEqual(expect.not.arrayContaining(['key2']))];
                    case 2:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        }); });
        test('not delete when nothing matches', function () { return __awaiter(void 0, void 0, void 0, function () {
            var result;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, store.deleteAll('test')];
                    case 1:
                        result = _a.sent();
                        expect(result).toBe(0);
                        return [2 /*return*/];
                }
            });
        }); });
    });
});
